{"version":3,"sources":["NodeModal.js","AppTree.js","helpers.js","treeService.js","App.js","index.js"],"names":["NodeModal","isOpen","node","onClose","onSubmit","onDelete","useState","undefined","selectedNode","setSelectedNode","name","child","setChild","useEffect","value","onChange","event","target","placeholder","gender","disabled","color","mr","variant","onClick","containerStyles","width","height","AppTree","readOnly","attributes","id","children","tree","setTree","defaultTranslate","x","y","translate","setTranslate","containerRef","useCallback","containerElem","getBoundingClientRect","useCenteredTree","setNode","orientation","setOrientation","handleNodeClick","datum","fetch","method","headers","mode","then","response","json","success","data","downloadFile","a","JSON","stringify","blob","Blob","type","URL","createObjectURL","href","link","document","createElement","download","body","appendChild","click","removeChild","style","ref","renderCustomNodeElement","nodeInfo","customProps","onNodeClick","nodeDatum","toggleNode","r","fill","strokeWidth","department","dy","renderRectSvgNode","params","App","exact","path","rootElement","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6e1e2fdf.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Modal,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  ModalContent,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  ModalOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel, Input, Select } from \"@chakra-ui/react\";\r\n\r\nconst NodeModal = ({ isOpen, node, onClose, onSubmit, onDelete }) => {\r\n  const [selectedNode, setSelectedNode] = useState(undefined);\r\n  const [child, setChild] = useState({ name: \"\" });\r\n\r\n  useEffect(() => {\r\n    setSelectedNode(node);\r\n  }, [node]);\r\n\r\n  const handleGenderChange = ({ target }) => {\r\n    setChild({ ...child, gender: target.value });\r\n  };\r\n\r\n  return (\r\n    <Modal isOpen={isOpen} onClose={onClose}>\r\n      <ModalOverlay />\r\n      <ModalContent>\r\n        <ModalHeader>Add family member</ModalHeader>\r\n        <ModalCloseButton />\r\n        <ModalBody>\r\n          <FormControl>\r\n            <FormLabel>Parent Name</FormLabel>\r\n            <Input\r\n              value={selectedNode && selectedNode.name}\r\n              onChange={(event) => {\r\n                setSelectedNode({\r\n                  ...selectedNode,\r\n                  name: event.target.value,\r\n                });\r\n              }}\r\n            />\r\n          </FormControl>\r\n          <FormControl>\r\n            <FormLabel>Parent Gender</FormLabel>\r\n            <Select\r\n              placeholder=\"Select gender\"\r\n              value={selectedNode && selectedNode.gender}\r\n              disabled={selectedNode && !selectedNode.name}\r\n              onChange={({ target }) =>\r\n                setSelectedNode({ ...selectedNode, gender: target.value })\r\n              }\r\n            >\r\n              <option value=\"male\">Male</option>\r\n              <option value=\"female\">Female</option>\r\n            </Select>\r\n          </FormControl>\r\n          <FormControl>\r\n            <FormLabel>Child Name</FormLabel>\r\n            <Input\r\n              value={child.name}\r\n              onChange={(event) =>\r\n                setChild({ ...child, name: event.target.value })\r\n              }\r\n            />\r\n          </FormControl>\r\n          <FormControl>\r\n            <FormLabel>Child Gender</FormLabel>\r\n            <Select\r\n              placeholder=\"Select gender\"\r\n              disabled={!child.name}\r\n              onChange={handleGenderChange}\r\n            >\r\n              <option value=\"male\">Male</option>\r\n              <option value=\"female\">Female</option>\r\n            </Select>\r\n          </FormControl>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button\r\n            color=\"red.500\"\r\n            mr={3}\r\n            variant=\"solid\"\r\n            onClick={() => {\r\n              onDelete(selectedNode);\r\n            }}\r\n            disabled={!selectedNode}\r\n          >\r\n            Delete\r\n          </Button>\r\n          <Button\r\n            color=\"blue.500\"\r\n            variant=\"solid\"\r\n            onClick={() => {\r\n              onSubmit(selectedNode, child);\r\n              setChild({ name: \"\" });\r\n            }}\r\n            disabled={!selectedNode}\r\n          >\r\n            Add\r\n          </Button>\r\n        </ModalFooter>\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default NodeModal;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Tree from \"react-d3-tree\";\r\nimport NodeModal from \"./NodeModal\";\r\nimport { useCenteredTree } from \"./helpers\";\r\nimport { deleteTreeApi, getTreeApi, postTreeApi } from \"./treeService\";\r\nimport { FormControl, Select, Button } from \"@chakra-ui/react\";\r\n\r\nconst containerStyles = {\r\n  width: \"100vw\",\r\n  height: \"100vh\",\r\n};\r\n\r\nconst AppTree = ({ readOnly = true }) => {\r\n  const [tree, setTree] = useState({\r\n    name: \"Root\",\r\n    gender: \"male\",\r\n    attributes: {\r\n      id: \"411d9783-85ba-41e5-a6a3-5e1cca3d294f\",\r\n    },\r\n    children: [],\r\n  });\r\n\r\n  const [translate, containerRef] = useCenteredTree();\r\n  const [node, setNode] = useState();\r\n  const [orientation, setOrientation] = useState(\"horizontal\");\r\n\r\n  const handleClose = () => setNode(undefined);\r\n  const handleNodeClick = (datum) => {\r\n    setNode(datum);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getTreeApi().then((response) => {\r\n      const { success, data } = response;\r\n      if (success) {\r\n        setTree(data);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  const downloadFile = async () => {\r\n    const json = JSON.stringify(tree);\r\n    const blob = new Blob([json], { type: \"application/json\" });\r\n    const href = await URL.createObjectURL(blob);\r\n    const link = document.createElement(\"a\");\r\n    link.href = href;\r\n    link.download = \"data.json\";\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  };\r\n\r\n  // Here we're using `renderCustomNodeElement` to represent each node\r\n  // as an SVG `rect` instead of the default `circle`.\r\n  const renderRectSvgNode = (customProps, onNodeClick) => {\r\n    const { nodeDatum, toggleNode } = customProps;\r\n\r\n    return (\r\n      <g>\r\n        <circle\r\n          r=\"15\"\r\n          fill={nodeDatum.gender === \"male\" ? \"#00ff00\" : \"#0000ff\"}\r\n          onClick={readOnly ? toggleNode : () => onNodeClick(nodeDatum)}\r\n        />\r\n        <text fill=\"black\" strokeWidth=\"1\" x=\"20\">\r\n          {nodeDatum.name}\r\n        </text>\r\n        {nodeDatum.attributes?.department && (\r\n          <text fill=\"black\" x=\"20\" dy=\"20\" strokeWidth=\"1\">\r\n            Department: {nodeDatum.attributes?.department}\r\n          </text>\r\n        )}\r\n      </g>\r\n    );\r\n  };\r\n\r\n  const handleSubmit = (node, child) => {\r\n    postTreeApi({ node, child }).then((response) => {\r\n      const { success, data } = response;\r\n      if (success) {\r\n        setTree(data);\r\n      }\r\n    });\r\n    setNode(undefined);\r\n  };\r\n\r\n  const handleDelete = (node) => {\r\n    deleteTreeApi({ node }).then((response) => {\r\n      const { success, data } = response;\r\n      if (success) {\r\n        setTree(data);\r\n        setNode(undefined);\r\n      } else {\r\n        setNode(undefined);\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div style={containerStyles} ref={containerRef}>\r\n      <FormControl>\r\n        {!readOnly && (\r\n          <Button color=\"blue.500\" variant=\"solid\" onClick={downloadFile}>\r\n            Download Json\r\n          </Button>\r\n        )}\r\n        <Select\r\n          placeholder=\"Select orientation\"\r\n          onChange={({ target }) => setOrientation(target.value)}\r\n        >\r\n          <option value=\"vertical\">Vertical</option>\r\n          <option value=\"horizontal\">Horizontal</option>\r\n        </Select>\r\n      </FormControl>\r\n      <Tree\r\n        data={tree}\r\n        orientation={orientation}\r\n        translate={translate}\r\n        renderCustomNodeElement={(nodeInfo) =>\r\n          renderRectSvgNode(nodeInfo, handleNodeClick)\r\n        }\r\n        onNodeClick={handleNodeClick}\r\n      />\r\n      {!readOnly && (\r\n        <NodeModal\r\n          onSubmit={handleSubmit}\r\n          onDelete={handleDelete}\r\n          onClose={handleClose}\r\n          node={node}\r\n          isOpen={!!node}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppTree;\r\n","import { useCallback, useState } from \"react\";\n\nexport const useCenteredTree = (defaultTranslate = { x: 0, y: 0 }) => {\n  const [translate, setTranslate] = useState(defaultTranslate);\n  const containerRef = useCallback((containerElem) => {\n    if (containerElem !== null) {\n      const { width, height } = containerElem.getBoundingClientRect();\n      setTranslate({ x: width / 2, y: height / 2 });\n    }\n  }, []);\n  return [translate, containerRef];\n};\n","export const getTreeApi = () => {\r\n  return fetch(`/get-tree`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      mode: \"no-cors\",\r\n    },\r\n  }).then((response) => response.json());\r\n};\r\n\r\nexport const postTreeApi = (params) => {\r\n  return fetch(`/post-tree`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      mode: \"no-cors\",\r\n    },\r\n    body: JSON.stringify(params),\r\n  }).then((response) => response.json());\r\n};\r\n\r\nexport const deleteTreeApi = (params) => {\r\n  return fetch(`/delete-node`, {\r\n    method: \"DELETE\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      mode: \"no-cors\",\r\n    },\r\n    body: JSON.stringify(params),\r\n  }).then((response) => response.json());\r\n};\r\n","import React from \"react\";\nimport AppTree from \"./AppTree\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport \"./styles.css\";\n\nexport default function App() {\n  return (\n    <ChakraProvider>\n      <Router>\n        {/*\n          A <Switch> looks through all its children <Route>\n          elements and renders the first one whose path\n          matches the current URL. Use a <Switch> any time\n          you have multiple routes, but you want only one\n          of them to render at a time\n        */}\n        <Switch>\n          <Route exact path=\"/\">\n            <AppTree />\n          </Route>\n          <Route path=\"/admin\">\n            <AppTree readOnly={false} />\n          </Route>\n        </Switch>\n      </Router>\n    </ChakraProvider>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}